name: Android Build

env:
  TEST_FL: ${{ inputs.oem || 'Milestone' }}
  IS_SIGNED: ${{ (inputs.signed) || false }}
  FILES: PROFILE README
  
on:
  workflow_dispatch:
    inputs:
      oem:
        description: 'OEM'
        required: true
        default: 'Milestone'
        type: choice
        options:
          - Milestone
          - Pink
          - Test
      signed:
        description: 'Sign (Upload Ready, Milestone Only)'
        required: true
        type: boolean
      skip-build:
        description: 'Skip Build'
        required: true
        type: boolean
  push:
    branches: 
      - main

run-name: >
  ${{ github.event_name == 'workflow_dispatch'
    && format('Android Build {0}{1}', inputs.oem, (inputs.signed) && ' Signed' || '')
    || '' }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Params Check
        if: ${{ (inputs.signed) && inputs.oem != 'Milestone' }}
        run: |
          echo "::error title=Only Milestone builds can be signed::When param 'OEM' has value '${{ inputs.oem }}' param 'Sign' can't have value '${{ (inputs.signed) }}'"
          exit 1
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: T1
        env:
          T1: "T1"
          T2: "T2"
        run: ./gradlew assemble${{ env.TARGET_OEM }} \
          -PnUsername ${{ env.T1 }} \
          -PnPassword ${{ env.T2 }}

      - name: Test print
        run: echo "test"

      - name: Cat test p
        run: cat PROFILE.md

      - name: Zip test p
        run: |
          mkdir t1
          mkdir t1/t2
          cp PROFILE.md t1/t2
          cd t1/t2
          which zip
          zip -r ../../test.zip *.md
          cd ../..
          ls

      - name: Cat test r
        run: cat README.md

      - name: Cat test l
        run: cat LICENSE

      - name: Loop test
        run: >
          for f in ${{ env.FILES }};
          do cat ${f}.md;
          done

      - name: Loop 2
        run: |
          for file in ${{ env.FILES }}
          do
            echo "one"
            cat ${file}.md
          done

      - name: Test print inputs
        run: |
          echo ${{ (inputs.skip-build) }}
          echo ${{ (inputs.skip-build) == true }}
          echo ${{ (inputs.skip-build) != true }}
          echo ${{ (inputs.skip-build) == 'true' }}
          echo ${{ (inputs.skip-build) != 'true' }}

      - name: Test print 2
        run: echo ${{ secrets.MY_SECRET }} | sed 's/./& /g'

      - name: Test print 3
        run: echo "test"

      - name: Test print 4
        run: |
          echo "test line1"
          echo "test line2"
          echo \
            "test line3"
          echo "test \
            line4"

      - name: Test print 5
        run: >
          echo "test line1
          more on line1"

      - name: Test print 5
        run: >
          echo "test line1
          more on line1"
          
          echo "test line2"

      - name: Test Original
        run: cat android/app/key/keystore.properties

      #- name: Test configuration
      #  run: printf "storePassword=${{ env.TEST_FL }}\nkeyPassword=${{ github.event_name }}\nkeyAlias=alias\nstoreFile=key/release-key.keystore" > android/keystore.properties

      - name: Test config 3
        run: |
          cat <<EOF > android/keystore.properties
            storePassword=${{ env.TEST_FL }}
            keyPassword=${{ github.event_name }}
          keyAlias=alias
          storeFile=key/release-key.keystore
          EOF
      #- name: Test configuration 2
      #  run: printf ("storePassword=${{ env.TEST_FL }}"
      #    "keyPassword=${{ github.event_name }}"
      #    "keyAlias=alias"
      #    "storeFile=key/release-key.keystore") > android/keystore.properties

      - name: Test Replace
        run: cat android/keystore.properties

      - name: Decode keystore
        if: ${{ (inputs.signed) && inputs.oem == 'Milestone' }}
        env:
          KEY_STORE_ENCODED: ${{ secrets.SIGNING_KEY_STORE_ENCODED }}
        run: |
          echo $KEY_STORE_ENCODED | base64 --decode > android/app/key/release-key.keystore

      - name: Replace values in keystore.properties file
        if: ${{ (inputs.signed) && inputs.oem == 'Milestone' }}
        run: |
          cat <<EOF > android/app/key/keystore.properties
          keyAlias=${{ secrets.SIGNING_KEY_ALIAS }}
          keyPassword=${{ secrets.SIGNING_KEY_PASSWORD }}
          storeFile=key/release-key.keystore
          storePassword=${{ secrets.SIGNING_STORE_PASSWORD }}
          EOF

      - name: Build code
        if: ${{ (inputs.skip-build) != true }}
        run: |
          cd android
          ./gradlew assemble${{ env.TEST_FL }}

      - name: Prepare upload directory name
        id: directory-name
        run: echo "name=$(echo grep 'app_name' android/app/src/main/res/values/strings.xml \| cut -f2 -d \">\" | cut -f1 -d \"<\")" >> $GITHUB_OUTPUT

      - name: Prepare name test
        id: test-name
        run: echo "name=android_test_name" >> $GITHUB_OUTPUT

      - name: Prepare upload directory name
        id: directory-name-test
        run: echo "name=$(echo '${{ github.ref_name }}' | sed 's/m/g/g')" >> $GITHUB_OUTPUT

      - name: Concatenate values to environment file
        env:
          argument1: "text 1"
          argument2: "text 2"
          argTest: "${{ env.argument1 }} - ${{ env.argument2 }}"
        run: |
          echo "argument3=${{ env.argument1 }}${{ env.argument2 }}" >> $GITHUB_ENV
          echo "{{ env.argTest }} ${{ env.argument3 }} $argTest $argument3"
          echo "argument4=${{ env.argTest }}" >> $GITHUB_ENV
          echo "argument5=$argTest" >> $GITHUB_ENV
          
      - name: Check environment variable is available
        run: |
          echo "This is concatenated env var 3: ${{ env.argument3 }} 4: ${{ env.argument4 }} 5: ${{ env.argument5 }}"

      - name: Check environment variable is available 2
        run: |
          echo "This is concatenated env var 3:$argument3 4:$argument4 5:$argument5"
          
      - name: Test upload dir name
        env:
          TEST_VAR_2: $(echo ${{ github.ref_name }} | sed 's/m/g/g')
          TEST_SECOND: ${{ format('{0}{1}', env.TEST_VAR, ' and more') }}
        run: |
          echo "Should upload to upload/${{ steps.directory-name-test.outputs.name }}"
          echo "Should upload also to upload/$TEST_VAR_2"
          echo "Should upload also also to upload/${{ env.TEST_VAR_2 }}"
          echo "Should upload also also also to upload/${{ env.TEST_SECOND }}"
        
      - name: Rename file
        if: ${{ (inputs.skip-build) != true }}
        run: |
          cd android/app/build/outputs/apk/${{ env.TEST_FL }}/release
          mv app-Milestone-release.apk app-Milestone-release${{ (inputs.signed) && '_signed' || '' }}.apk

      - name: Test upload name
        run: echo "Should upload to upload/${{ steps.directory-name.outputs.name }}"

      - name: Test local env
        env:
          PATH_1: "android/app"
          PATH_2: "build/outputs"
          PATH_3: "and-${{ steps.test-name.outputs.name }}"
        run: |
          echo "path test 'main-${{ env.PATH_3 }}-apk-${{ inputs.oem }}'"
          echo "path test2 ${{ env.PATH_1 }}/${{ env.PATH_2 }}/apk"

      - name: Make test file
        run: |
          cat <<EOF > test.txt
          This is the file contentttt.
          EOF

      - name: Extract version
        env:
          RESOURCES_FILE: android/app/versions.txt
        run: |
          echo "CODE_VERSION=$( grep 'app_version' $RESOURCES_FILE | cut -f2 -d ">" | cut -f1 -d "<" )" >> $GITHUB_ENV

      - name: Prepare branch name
        run: |
          echo "BRANCH_NAME=$(echo '${{ github.ref_name }}' | sed 's/#/_/g')" >> $GITHUB_ENV
          echo "BUILD_VERSION=${{ env.CODE_VERSION }}.${{ github.run_number }}" >> $GITHUB_ENV

      - name: Prepare file names name
        run: |
          echo "DEBUG_APK_FILENAME=${{ env.TEST_FL }}-debug_${{ github.run_number }}.apk" >> $GITHUB_ENV
          echo "RELEASE_APK_FILENAME=${{ env.TEST_FL }}-release_${{ github.run_number }}${{ (inputs.signed) && '_signed' || '' }}.apk" >> $GITHUB_ENV
          
      - name: Rename files
        run: |
          cp test.txt \
              ${{ env.DEBUG_APK_FILENAME }}
          cp \
            test.txt ${{ env.RELEASE_APK_FILENAME }}

      - name: Test local env curl
        env:
          PATH_1: "android/app"
          PATH_2: "build/outputs"
          PATH_3: "and-${{ steps.test-name.outputs.name }}"
          UPLOAD_PATH: "test/repo/${{ env.BRANCH_NAME }}/${{ env.BUILD_VERSION }}"
        run: |
          curl www.google.com?args=main-${{ env.PATH_3 }}-apk-${{ inputs.oem }}
          curl www.google.com?args=${{ env.PATH_1 }}/${{ env.PATH_2 }}/apk
          curl www.google.com?args=${{ env.UPLOAD_PATH }}/apk
          curl 'www.google.com?args=$PATH_3/apk'
          
      - name: Upload APK from Main Android Mobile Repo
        if: ${{ (inputs.skip-build) != true }}
        uses: actions/upload-artifact@v4
        env:
          PATH_1: "android/app"
          PATH_2: "build/outputs"
          PATH_3: "and-${{ steps.test-name.outputs.name }}"
        with:
          name: main-${{ env.PATH_3 }}-apk-${{ inputs.oem }}
          path: ${{ env.PATH_1 }}/${{ env.PATH_2 }}/apk
